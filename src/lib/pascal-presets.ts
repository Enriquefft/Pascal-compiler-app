export enum PascalTag {
	Float = "Float",
	UnsignedInt = "UnsignedInt",
	LongInt = "LongInt",
	DynamicMemory = "DynamicMemory",
	Strings = "Strings",
	Arrays = "Arrays",
	Struct = "Struct",
	Pointer = "Pointer",
	Invalid = "Invalid",
}

export interface PascalPreset {
	code: string;
	tags: PascalTag[];
}

export const validPascalPresets: PascalPreset[] = [
	{
		code: [
			"program HolaMundo;",
			"begin",
			"writeln('Hola, mundo!');",
			"end.",
		].join("\n"),
		tags: [PascalTag.Strings],
	},

	{
		code: [
			"program RecordPointer;",
			"type",
			"  PRec = ^Rec;",
			"  Rec = record",
			"    name: string;",
			"    value: real;",
			"  end;",
			"var",
			"  p: PRec;",
			"begin",
			"  new(p);",
			"  p^.name := 'Pi';",
			"  p^.value := 3.14;",
			"  writeln(p^.name, ': ', p^.value:0:2);",
			"  dispose(p);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Float,
			PascalTag.Strings,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program ArrayPointer;",
			"var",
			"  numbers: array[1..3] of longint;",
			"  p: ^longint;",
			"begin",
			"  numbers[1] := 10;",
			"  numbers[2] := 20;",
			"  numbers[3] := 30;",
			"  p := @numbers[1];",
			"  writeln(p^);",
			"end.",
		].join("\n"),
		tags: [PascalTag.LongInt, PascalTag.Arrays, PascalTag.Pointer],
	},
	{
		code: [
			"program RecordArray;",
			"type",
			"  Arr = array[1..5] of real;",
			"  PRec = ^Rec;",
			"  Rec = record",
			"    data: Arr;",
			"  end;",
			"var",
			"  p: PRec;",
			"  i: integer;",
			"begin",
			"  new(p);",
			"  for i := 1 to 5 do",
			"    p^.data[i] := i * 1.5;",
			"  writeln(p^.data[3]:0:1);",
			"  dispose(p);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Float,
			PascalTag.Arrays,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program NestedPointer;",
			"type",
			"  UIntArray = array[1..4] of unsigned integer;",
			"  PRec = ^Rec;",
			"  Rec = record",
			"    nums: ^UIntArray;",
			"  end;",
			"var",
			"  r: PRec;",
			"  i: integer;",
			"begin",
			"  new(r);",
			"  new(r^.nums);",
			"  for i := 1 to 4 do",
			"    r^.nums^[i] := i;",
			"  writeln(r^.nums^[2]);",
			"  dispose(r^.nums);",
			"  dispose(r);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.UnsignedInt,
			PascalTag.Arrays,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program StringRecord;",
			"type",
			"  PUser = ^User;",
			"  User = record",
			"    username: string;",
			"    age: unsigned integer;",
			"  end;",
			"var",
			"  u: PUser;",
			"begin",
			"  new(u);",
			"  u^.username := 'Alice';",
			"  u^.age := 30;",
			"  writeln(u^.username, ' ', u^.age);",
			"  dispose(u);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Strings,
			PascalTag.UnsignedInt,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program ArrayRecords;",
			"type",
			"  PItem = ^Item;",
			"  Item = record",
			"    id: longint;",
			"  end;",
			"var",
			"  items: array[1..2] of PItem;",
			"  i: integer;",
			"begin",
			"  for i := 1 to 2 do",
			"  begin",
			"    new(items[i]);",
			"    items[i]^.id := i * 1000;",
			"  end;",
			"  writeln(items[2]^.id);",
			"  for i := 1 to 2 do",
			"    dispose(items[i]);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Arrays,
			PascalTag.LongInt,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program DoublePointer;",
			"var",
			"  p: ^real;",
			"  pp: ^^real;",
			"begin",
			"  new(p);",
			"  p^ := 5.5;",
			"  pp := @p;",
			"  writeln(pp^^:0:1);",
			"  dispose(p);",
			"end.",
		].join("\n"),
		tags: [PascalTag.Float, PascalTag.Pointer, PascalTag.DynamicMemory],
	},
	{
		code: [
			"program NestedStruct;",
			"type",
			"  Inner = record",
			"    count: unsigned integer;",
			"  end;",
			"  Outer = record",
			"    inner: Inner;",
			"    value: longint;",
			"  end;",
			"var",
			"  o: ^Outer;",
			"begin",
			"  new(o);",
			"  o^.inner.count := 2;",
			"  o^.value := 12345;",
			"  writeln(o^.inner.count, ' ', o^.value);",
			"  dispose(o);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.UnsignedInt,
			PascalTag.LongInt,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program RefRecord;",
			"type",
			"  PNode = ^Node;",
			"  Node = record",
			"    text: string;",
			"    next: PNode;",
			"  end;",
			"var",
			"  first, second: PNode;",
			"begin",
			"  new(first);",
			"  new(second);",
			"  first^.text := 'First';",
			"  second^.text := 'Second';",
			"  first^.next := second;",
			"  writeln(first^.next^.text);",
			"  dispose(second);",
			"  dispose(first);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Strings,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program ProcPointer;",
			"type",
			"  PData = ^Data;",
			"  Data = record",
			"    values: array[1..3] of real;",
			"  end;",
			"",
			"procedure Fill(var d: PData);",
			"var",
			"  i: integer;",
			"begin",
			"  new(d);",
			"  for i := 1 to 3 do",
			"    d^.values[i] := i / 2;",
			"end;",
			"",
			"var",
			"  p: PData;",
			"begin",
			"  Fill(p);",
			"  writeln(p^.values[2]:0:1);",
			"  dispose(p);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Float,
			PascalTag.Arrays,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program PtrArrayLoop;",
			"type",
			"  LongArray = array[1..3] of longint;",
			"var",
			"  p: ^LongArray;",
			"  i: integer;",
			"begin",
			"  new(p);",
			"  for i := 1 to 3 do",
			"    p^[i] := i * 100;",
			"  writeln(p^[3]);",
			"  dispose(p);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.LongInt,
			PascalTag.Arrays,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program MixedRecord;",
			"type",
			"  PMixed = ^Mixed;",
			"  Mixed = record",
			"    name: string;",
			"    scores: array[1..2] of real;",
			"  end;",
			"var",
			"  m: PMixed;",
			"begin",
			"  new(m);",
			"  m^.name := 'Bob';",
			"  m^.scores[1] := 9.8;",
			"  m^.scores[2] := 7.5;",
			"  writeln(m^.name, ' ', m^.scores[1]:0:1);",
			"  dispose(m);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Strings,
			PascalTag.Float,
			PascalTag.Arrays,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program RecordArrayOfString;",
			"type",
			"  TStringArray = array[1..2] of string;",
			"  PRec = ^Rec;",
			"  Rec = record",
			"    names: ^TStringArray;",
			"  end;",
			"var",
			"  r: PRec;",
			"begin",
			"  new(r);",
			"  new(r^.names);",
			"  r^.names^[1] := 'foo';",
			"  r^.names^[2] := 'bar';",
			"  writeln(r^.names^[2]);",
			"  dispose(r^.names);",
			"  dispose(r);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Strings,
			PascalTag.Arrays,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program PointerField;",
			"type",
			"  PInner = ^Inner;",
			"  Inner = record",
			"    x: real;",
			"    y: longint;",
			"  end;",
			"  Outer = record",
			"    item: PInner;",
			"  end;",
			"var",
			"  o: ^Outer;",
			"begin",
			"  new(o);",
			"  new(o^.item);",
			"  o^.item^.x := 1.1;",
			"  o^.item^.y := 42;",
			"  writeln(o^.item^.x:0:1, ' ', o^.item^.y);",
			"  dispose(o^.item);",
			"  dispose(o);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Float,
			PascalTag.LongInt,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program StackExample;",
			"type",
			"  PStack = ^Stack;",
			"  Stack = record",
			"    data: array[1..5] of longint;",
			"    top: unsigned integer;",
			"  end;",
			"var",
			"  s: PStack;",
			"begin",
			"  new(s);",
			"  s^.top := 0;",
			"  s^.top := s^.top + 1;",
			"  s^.data[s^.top] := 10;",
			"  writeln(s^.data[1]);",
			"  dispose(s);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Arrays,
			PascalTag.LongInt,
			PascalTag.UnsignedInt,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program MatrixExample;",
			"type",
			"  RealRow = array[1..2] of real;",
			"  PRealMatrix = ^RealMatrix;",
			"  RealMatrix = array[1..2] of RealRow;",
			"var",
			"  m: PRealMatrix;",
			"begin",
			"  new(m);",
			"  m^[1][1] := 1.0;",
			"  m^[1][2] := 2.0;",
			"  m^[2][1] := 3.0;",
			"  m^[2][2] := 4.0;",
			"  writeln(m^[2][2]:0:1);",
			"  dispose(m);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Arrays,
			PascalTag.Float,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program ComplexNumber;",
			"type",
			"  PComplex = ^Complex;",
			"  Complex = record",
			"    re: real;",
			"    im: real;",
			"  end;",
			"var",
			"  c: PComplex;",
			"begin",
			"  new(c);",
			"  c^.re := 1.5;",
			"  c^.im := -2.5;",
			"  writeln(c^.re:0:1, ' ', c^.im:0:1);",
			"  dispose(c);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Float,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program RecordArrayUInt;",
			"type",
			"  PURec = ^URec;",
			"  URec = record",
			"    name: string;",
			"    data: array[1..3] of unsigned integer;",
			"  end;",
			"var",
			"  r: PURec;",
			"begin",
			"  new(r);",
			"  r^.name := 'data';",
			"  r^.data[1] := 1;",
			"  r^.data[2] := 2;",
			"  r^.data[3] := 3;",
			"  writeln(r^.name, ' ', r^.data[3]);",
			"  dispose(r);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Strings,
			PascalTag.UnsignedInt,
			PascalTag.Arrays,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program PtrLong;",
			"var",
			"  p: ^longint;",
			"begin",
			"  new(p);",
			"  p^ := 1000;",
			"  writeln(p^);",
			"  dispose(p);",
			"end.",
		].join("\n"),
		tags: [PascalTag.LongInt, PascalTag.Pointer, PascalTag.DynamicMemory],
	},
	{
		code: [
			"program LoopAlloc;",
			"type",
			"  PItem = ^Item;",
			"  Item = record",
			"    value: longint;",
			"    next: PItem;",
			"  end;",
			"var",
			"  head, node: PItem;",
			"  i: integer;",
			"begin",
			"  head := nil;",
			"  for i := 1 to 3 do",
			"  begin",
			"    new(node);",
			"    node^.value := i * 10;",
			"    node^.next := head;",
			"    head := node;",
			"  end;",
			"  writeln(head^.value);",
			"  while head <> nil do",
			"  begin",
			"    node := head^.next;",
			"    dispose(head);",
			"    head := node;",
			"  end;",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.LongInt,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program ArrayOfRecords;",
			"type",
			"  Rec = record",
			"    num: real;",
			"  end;",
			"  PRecArray = ^RecArray;",
			"  RecArray = array[1..2] of Rec;",
			"var",
			"  a: PRecArray;",
			"begin",
			"  new(a);",
			"  a^[1].num := 2.2;",
			"  a^[2].num := 3.3;",
			"  writeln(a^[2].num:0:1);",
			"  dispose(a);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Float,
			PascalTag.Arrays,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program LinkedList;",
			"type",
			"  PNode = ^Node;",
			"  Node = record",
			"    value: longint;",
			"    next: PNode;",
			"  end;",
			"var",
			"  head, temp: PNode;",
			"begin",
			"  new(head);",
			"  head^.value := 5;",
			"  head^.next := nil;",
			"  new(temp);",
			"  temp^.value := 6;",
			"  temp^.next := head;",
			"  head := temp;",
			"  writeln(head^.next^.value);",
			"  dispose(temp);",
			"  dispose(head^.next);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.LongInt,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program ReturnPointer;",
			"type",
			"  RealArray = array[1..2] of real;",
			"  PRealArray = ^RealArray;",
			"",
			"function Build: PRealArray;",
			"var",
			"  p: PRealArray;",
			"begin",
			"  new(p);",
			"  p^[1] := 1.1;",
			"  p^[2] := 2.2;",
			"  Build := p;",
			"end;",
			"",
			"var",
			"  arr: PRealArray;",
			"begin",
			"  arr := Build;",
			"  writeln(arr^[1]:0:1);",
			"  dispose(arr);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Float,
			PascalTag.Arrays,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program NestedPointerField;",
			"type",
			"  PInner = ^longint;",
			"  POuter = ^Outer;",
			"  Outer = record",
			"    ref: PInner;",
			"  end;",
			"var",
			"  o: POuter;",
			"begin",
			"  new(o);",
			"  new(o^.ref);",
			"  o^.ref^ := 77;",
			"  writeln(o^.ref^);",
			"  dispose(o^.ref);",
			"  dispose(o);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.LongInt,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program ArrayOfPointers;",
			"type",
			"  PRec = ^Rec;",
			"  Rec = record",
			"    title: string;",
			"    number: real;",
			"  end;",
			"var",
			"  arr: array[1..2] of PRec;",
			"  i: integer;",
			"begin",
			"  for i := 1 to 2 do",
			"  begin",
			"    new(arr[i]);",
			"    arr[i]^.number := i * 1.0;",
			"    arr[i]^.title := 'Item' + chr(48 + i);",
			"  end;",
			"  writeln(arr[2]^.title);",
			"  for i := 1 to 2 do",
			"    dispose(arr[i]);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Strings,
			PascalTag.Float,
			PascalTag.Arrays,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program PointerToArrayOfPointers;",
			"type",
			"  PRec = ^Rec;",
			"  Rec = record",
			"    n: longint;",
			"  end;",
			"  PArr = ^Arr;",
			"  Arr = array[1..2] of PRec;",
			"var",
			"  a: PArr;",
			"  i: integer;",
			"begin",
			"  new(a);",
			"  for i := 1 to 2 do",
			"  begin",
			"    new(a^[i]);",
			"    a^[i]^.n := i;",
			"  end;",
			"  writeln(a^[1]^.n);",
			"  for i := 1 to 2 do",
			"    dispose(a^[i]);",
			"  dispose(a);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.LongInt,
			PascalTag.Arrays,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program PointerString;",
			"var",
			"  p: ^string;",
			"begin",
			"  new(p);",
			"  p^ := 'hello';",
			"  writeln(p^);",
			"  dispose(p);",
			"end.",
		].join("\n"),
		tags: [PascalTag.Strings, PascalTag.Pointer, PascalTag.DynamicMemory],
	},
	{
		code: [
			"program PointerUnsigned;",
			"var",
			"  p: ^unsigned integer;",
			"begin",
			"  new(p);",
			"  p^ := 42;",
			"  writeln(p^);",
			"  dispose(p);",
			"end.",
		].join("\n"),
		tags: [PascalTag.UnsignedInt, PascalTag.Pointer, PascalTag.DynamicMemory],
	},
	{
		code: [
			"program RecordWithArray;",
			"type",
			"  Child = record",
			"    value: longint;",
			"  end;",
			"  Parent = record",
			"    items: array[1..2] of Child;",
			"  end;",
			"var",
			"  p: ^Parent;",
			"begin",
			"  new(p);",
			"  p^.items[1].value := 1;",
			"  p^.items[2].value := 2;",
			"  writeln(p^.items[2].value);",
			"  dispose(p);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.LongInt,
			PascalTag.Arrays,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
	{
		code: [
			"program TreeExample;",
			"type",
			"  PNode = ^Node;",
			"  Node = record",
			"    key: string;",
			"    value: longint;",
			"    left, right: PNode;",
			"  end;",
			"",
			"function NewNode(k: string; v: longint): PNode;",
			"var",
			"  n: PNode;",
			"begin",
			"  new(n);",
			"  n^.key := k;",
			"  n^.value := v;",
			"  n^.left := nil;",
			"  n^.right := nil;",
			"  NewNode := n;",
			"end;",
			"",
			"var",
			"  root: PNode;",
			"begin",
			"  root := NewNode('root', 1);",
			"  writeln(root^.key, ' ', root^.value);",
			"  dispose(root);",
			"end.",
		].join("\n"),
		tags: [
			PascalTag.Strings,
			PascalTag.LongInt,
			PascalTag.Struct,
			PascalTag.Pointer,
			PascalTag.DynamicMemory,
		],
	},
];

export const invalidPascalPresets: PascalPreset[] = [
	{
		code: [
			"program MissingSemicolon;",
			"var",
			"  x: integer",
			"begin",
			"  x := 1",
			"  writeln(x);",
			"end.",
		].join("\n"),
		tags: [PascalTag.Invalid],
	},
	{
		code: ["program UndeclaredVar;", "begin", "  y := 2;", "end."].join("\n"),
		tags: [PascalTag.Invalid],
	},
	{
		code: ["program UnclosedBegin;", "begin", "  writeln('test');"].join("\n"),
		tags: [PascalTag.Invalid],
	},
	{
		code: [
			"program TypeMismatch;",
			"var",
			"  p: ^integer;",
			"begin",
			"  p := 5;",
			"end.",
		].join("\n"),
		tags: [PascalTag.Invalid],
	},
	{
		code: [
			"program PointerArithmetic;",
			"var",
			"  p: ^integer;",
			"begin",
			"  new(p);",
			"  p := p + 1;",
			"end.",
		].join("\n"),
		tags: [PascalTag.Invalid],
	},
	{
		code: [
			"program NewNonPointer;",
			"var",
			"  i: integer;",
			"begin",
			"  new(i);",
			"end.",
		].join("\n"),
		tags: [PascalTag.Invalid],
	},
	{
		code: [
			"program InvalidRange;",
			"var",
			"  a: array[5..1] of integer;",
			"begin",
			"end.",
		].join("\n"),
		tags: [PascalTag.Invalid],
	},
	{
		code: [
			"program UnknownType;",
			"var",
			"  x: crazytype;",
			"begin",
			"  x := 0;",
			"end.",
		].join("\n"),
		tags: [PascalTag.Invalid],
	},
	{
		code: ["program MissingBegin;", "writeln('hi');", "end."].join("\n"),
		tags: [PascalTag.Invalid],
	},
	{
		code: [
			"program UnclosedString;",
			"begin",
			"  writeln('hello);",
			"end.",
		].join("\n"),
		tags: [PascalTag.Invalid],
	},
];
